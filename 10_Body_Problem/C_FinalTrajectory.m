tic;clc;clear;close all;
format('Compact');
format('LongG');

currentFolder = fileparts(mfilename('fullpath'));
CodePath = fullfile(currentFolder, '..', 'SourceCode');
addpath(CodePath);

Equal = strcat(repelem('=',100));
Dash = strcat(repelem('-',100));
String = 'Final Earth-Jupiter Transfer Parameters:\n';

fprintf(String);
fprintf("%s\n", Equal);

%% LOAD CONSTANTS, OPTIMAL PARAMETERS, AND PRELIMINARY TRAJECTORY DATA:

C = NbpConstants;
% []Loads the parameters for the problem solution.

load('EarthJupiterPreliminaryTrajectory.mat','Solution');
% []Loads the preliminary trajectory data.

load('EarthJupiterOptimalParameters.mat','Optimal');
% []Loads the data generated by the porkchop.

C.JDo = Optimal.JD;
% [solar days]Corrects the optimal departure Julian date.

%% PREPARE FINAL TRAJECTORY PARAMETERS:

InitialGuess = bvpinit(Solution.x,Solution.y(:,1));
% [km,km/s]Initial guess structure.

InitialGuess.y = Solution.y;
% [km,km/s]Sets the preliminary trajectory data as the initial guess.

Ro = Optimal.Rsatcm;
% [km]Satellite departure position WRT the CM in ECI coordinates.

Rf = Optimal.Rtcm - 30 * C.R(5) * Optimal.Rtcm / norm(Optimal.Rtcm);
% [km]Satellite arrival position WRT the CM in ECI coordinates.

%% SOLUTION:

Solution = bvp4c( ...
    @(t,S)NbpEom(t,S,C), ...
    @(So,Sf)NbpBoundaryConditions(So,Sf,Ro,Rf), ...
    InitialGuess, ...
    C.BvpOptions);
% [s,km,km/s]Numerically integrates the N-Body problem as a boundary value problem.

save('EarthJupiterFinalTrajectory.mat','Solution');
% []Stores the data for the final trajectory.

%% PLOT RESULTS:

R = PlotTrajectory(Solution,C,'Earth-Jupiter Transfer (Final)');
% []Plots the satellite interplanetary trajectory.

PlotDepartureTrajectory(R, C,'Earth Departure');
% []Plots the satellite departure trajectory.

PlotArrivalTrajectory(R,C,'Jupiter Arrival');
% []Plots the satellite arrival trajectory.

%% PRINT RESULTS:

String = { ...
    'Departure\n%s\n'; ...
    'Departure UTC: %4.0f:%02.0f:%02.0f:%02.0f:%02.0f:%02.0f\n'; ...
    '\x0394v = %0.3f km/s\n'; ...
    '%s\n'; ...
    'Arrival\n%s\n'; ...
    'Arrival UTC: %4.0f:%02.0f:%02.0f:%02.0f:%02.0f:%02.0f\n'; ...
    '\x0394t = %0.3f days\n'; ...
    'Jupiter Distance: %0.3f JR\n'};
% []Formatted string.

UTCo = datetime(Optimal.JD,'ConvertFrom','JulianDate','Format','yyyy:MM:dd:HH:mm:ss');
% []Departure UTC as a datetime value.

UTCo = datevec(UTCo);
% [yyyy,MM,dd,HH,mm,ss]Departure UTC.

UTCf = datetime( ...
    Optimal.JD + Optimal.dt / 86400,'ConvertFrom','JulianDate','Format','yyyy:MM:dd:HH:mm:ss');
% []Arrival UTC as a datetime value.

UTCf = datevec(UTCf);
% [yyyy,MM,dd,HH,mm,ss]Arrival UTC.

dv = DepartureDeltaV(Solution,Optimal,C);
% [km/s]Departure delta-v.

R105 = (R.R10cm - R.R5cm) / C.R(5);
% [JR] Satellite position WRT Jupiter in JR

Result = {Equal; UTCo; dv; Dash; Equal; UTCf; Optimal.dt / 86400; norm(R105(:,end))};
% []Results cell.

for k = 1:length(String)

    fprintf(String{k},Result{k});
    % []Prints the formatted string on the command window.

end

%% PRINT SIMULATION TIME:

fprintf("%s\n", Equal);
% []Prints the formatted string on the command window.

SimTime = toc;
% []Stops the program timer.

SimTimeStr = 'Simulation Time: %.0f minutes %0.3f seconds\n';
% []Formatted string.

fprintf(SimTimeStr,floor(SimTime / 60), mod(SimTime, 60));
% []Prints the simulation time on the command window.
%===================================================================================================